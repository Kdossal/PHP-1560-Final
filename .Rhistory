release("gohome_after_Phase2", 1)%>%
######### END Discharge after Phase 2 ########
#=============== begin phase 3 of treatment
branch(function() sample(c(1,2),size=1,replace=T,prob=c(0.752,0.248)), continue=c(T, T),
create_trajectory("Treatment_Phase3") %>%
seize("bed", amount = 1, priority = 8) %>%
seize("Treatment_Phase3_in", amount = 1, priority = 8) %>%
## 25 day
timeout(function() rnorm(1, 25, 2)) %>%
release("bed", 1) %>%
######### Discharge after Phase 3 ########
seize("gohome_after_phase3", amount = 1, priority = 99) %>%
timeout(function() sample(c(4,5,6),1)) %>%
release("gohome_after_phase3", 1)%>%
######### END Discharge after Phase 3 ########
#=============== begin phase 4 of treatment
branch(function() sample(c(1,2),size=1,replace=T,prob=c(0.99,0.01)), continue=c(T, T),
create_trajectory("Treatment_Phase4") %>%
seize("bed", amount = 1, priority = 8) %>%
seize("Treatment_Phase4_in", amount = 1, priority = 8) %>%
## 31.5 day
timeout(function() rnorm(1, 31.5, 2)) %>%
release("bed", 1) %>%
######### Discharge after Phase 4  ########
seize("gohome_after_phase4", amount = 1, priority = 99) %>%
timeout(function() sample(c(4,5,6),1)) %>%
release("gohome_after_phase4", 1)%>%
######### END Discharge after Phase 4 ########
#=====Relapse
branch(function() sample(c(1,2),size=1,replace=T,prob=c(0.2,0.8)), continue=c(T, T),
create_trajectory("relapse") %>%
seize("bed", amount = 1, priority = 8) %>%
seize("relapse", amount = 1, priority = 8) %>%
## 40 day
timeout(function() rnorm(1, 40, 2)) %>%
release("bed", 1)
,
create_trajectory("relapse_out") %>%
seize("relapse_out", amount = 1, priority = 1)
)
#=====END Relapse
,
create_trajectory("Phase4_out") %>%
seize("Phase4_out", amount = 1, priority = 1)
)
#=============End Phase 4
,
create_trajectory("Phase3_out") %>%
seize("Phase3_out", amount = 1, priority = 1)
)
#===============End phase 3
,
create_trajectory("Phase2_out") %>%
seize("Phase2_out", amount = 1, priority = 1)
)
#=================End phase 2
,
create_trajectory("Phase1_out") %>%
set_attribute("health_attribute", function() rnorm(1,90,3))%>%
seize("phase1_out", amount = 1, priority = 1)
)
library(simmer)
envs <- lapply(1:myrep, function(i) { #### lapply() to repeat myrep times
env <- simmer("DiseaseX-env")
############### START Implementation of Decision Tree ###################
## add a new patient trajectory
newpatient <- create_trajectory("DiseaseX_patient_path") %>%
## the use of function1() %>% function2() %>% function3()
## is the same as using function3(function2(function1()))
## if you need to set an attribute use set_attribute() function
set_attribute("health_attribute", function() rnorm(1,70,3))%>%
branch(function() sample(c(1,2),size=1,replace=T,prob=c(0.90,0.10)), continue=c(T, T),
### begin treatment Phase1
create_trajectory("Treatment_Phase1") %>%
seize("bed", amount = 1, priority = 1) %>%
## for counting purpose, use dummy resource like the following
seize("Treatment_Phase1_in", amount = 1, priority = 1) %>%
## use the proper distribution that match real distribution
timeout(function() rnorm(1, 31, 2)) %>%
release("bed", 1)%>%
set_attribute("health_attribute", function() rnorm(1,50,3))%>%
######### Discharge after Phase 1 #######
## again dummy resource for counting purpose
seize("gohome_after_Phase1", amount = 1, priority = 99) %>%
timeout(function() sample(c(4,5,6),1)) %>%
release("gohome_after_Phase1", 1)%>%
######### Discharge after Phase 1 ########
#================ begin phase 2 of treatment
branch(function() sample(c(1,2),size=1,replace=T,prob=c(0.964,0.036)), continue=c(T, T),
create_trajectory("Treatment_Phase2") %>%
seize("bed", amount = 1, priority = 9) %>%
seize("Treatment_Phase2_in", amount = 1, priority = 9) %>%
## 28 day
timeout(function() rnorm(1, 28, 2)) %>%
release("bed", 1)%>%
######### Discharge after Phase 2 ########
seize("gohome_after_Phase2", amount = 1, priority = 99) %>%
timeout(function() sample(c(4,5,6),1)) %>%
release("gohome_after_Phase2", 1)%>%
######### END Discharge after Phase 2 ########
#=============== begin phase 3 of treatment
branch(function() sample(c(1,2),size=1,replace=T,prob=c(0.752,0.248)), continue=c(T, T),
create_trajectory("Treatment_Phase3") %>%
seize("bed", amount = 1, priority = 8) %>%
seize("Treatment_Phase3_in", amount = 1, priority = 8) %>%
## 25 day
timeout(function() rnorm(1, 25, 2)) %>%
release("bed", 1) %>%
######### Discharge after Phase 3 ########
seize("gohome_after_phase3", amount = 1, priority = 99) %>%
timeout(function() sample(c(4,5,6),1)) %>%
release("gohome_after_phase3", 1)%>%
######### END Discharge after Phase 3 ########
#=============== begin phase 4 of treatment
branch(function() sample(c(1,2),size=1,replace=T,prob=c(0.99,0.01)), continue=c(T, T),
create_trajectory("Treatment_Phase4") %>%
seize("bed", amount = 1, priority = 8) %>%
seize("Treatment_Phase4_in", amount = 1, priority = 8) %>%
## 31.5 day
timeout(function() rnorm(1, 31.5, 2)) %>%
release("bed", 1) %>%
######### Discharge after Phase 4  ########
seize("gohome_after_phase4", amount = 1, priority = 99) %>%
timeout(function() sample(c(4,5,6),1)) %>%
release("gohome_after_phase4", 1)%>%
######### END Discharge after Phase 4 ########
#=====Relapse
branch(function() sample(c(1,2),size=1,replace=T,prob=c(0.2,0.8)), continue=c(T, T),
create_trajectory("relapse") %>%
seize("bed", amount = 1, priority = 8) %>%
seize("relapse", amount = 1, priority = 8) %>%
## 40 day
timeout(function() rnorm(1, 40, 2)) %>%
release("bed", 1)
,
create_trajectory("relapse_out") %>%
seize("relapse_out", amount = 1, priority = 1)
)
#=====END Relapse
,
create_trajectory("Phase4_out") %>%
seize("Phase4_out", amount = 1, priority = 1)
)
#=============End Phase 4
,
create_trajectory("Phase3_out") %>%
seize("Phase3_out", amount = 1, priority = 1)
)
#===============End phase 3
,
create_trajectory("Phase2_out") %>%
seize("Phase2_out", amount = 1, priority = 1)
)
#=================End phase 2
,
create_trajectory("Phase1_out") %>%
set_attribute("health_attribute", function() rnorm(1,90,3))%>%
seize("phase1_out", amount = 1, priority = 1)
)
############### END Implementation of Decision Tree ###################
env %>%
## add true resource
add_resource("bed", nbeds) %>%
### Note: only resources with defined capacity can be
### plotted in "Resource Utilization"
## add resources for counting purpose
add_resource("Treatment_Phase1_in", Inf) %>%
add_resource("Treatment_Phase2_in", Inf) %>%
add_resource("Treatment_Phase3_in", Inf) %>%
add_resource("Treatment_Phase4_in", Inf) %>%
add_resource("relapse", Inf) %>%
add_resource("gohome_after_Phase1", Inf) %>%
add_resource("gohome_after_Phase2", Inf) %>%
add_resource("gohome_after_phase3", Inf) %>%
add_resource("gohome_after_phase4", Inf) %>%
add_resource("Phase4_out", Inf) %>%
add_resource("Phase3_out", Inf) %>%
add_resource("Phase2_out", Inf) %>%
add_resource("phase1_out", Inf) %>%
add_resource("relapse_out", Inf) %>%
## Add "Disease-X patient" generator, we assumed exp distribution (from real data)
add_generator("test_patient", newpatient, function() c(rexp(1, 1/myIAT), rep(0, NumGenPt)), mon=2)
env %>% run(until=period) ## run the simulation until reach time specified
})
out <- capture.output(envs)
cat(paste(Sys.time(),"### Number of Bed =",nbeds,"### Number of Replica =",myrep,"### my IAT =",myIAT,"### Replicate Summary: \n"), out, file="envs.txt", sep="\n", append=TRUE)
attr<-envs %>% get_mon_attributes()
resources<-envs %>% get_mon_resources()
n_resources<-resources[resources$resource == "bed",] ## filter only true resource "bed"
arrivals<-envs %>% get_mon_arrivals(per_resource=T)
n_arrivals<-arrivals[arrivals$resource == "bed",]
n_arrivals$waiting <- n_arrivals$end_time - n_arrivals$start_time - n_arrivals$activity_time
n_arrivals$ALOS<-n_arrivals$activity_time
## sum the total ALOS per patient
## the next line works accurately only if myrep=1
## reason for not being accurate with more than one replication is that
## some patients will be created in one run but not in the other causing a
## significant impact on the mean.
## Next version of this code will fix this issue, till then, the display of results
## from the next line is limited by an "if(myrep==1)"
ALOS_n<-aggregate(n_arrivals$ALOS, by=list(n_arrivals$name), FUN=sum)
ALOS_n$x<-ALOS_n$x/myrep ## divide by number of replications
arrivals_no_resource<-get_mon_arrivals(envs)
arrivals_no_resource$ALOS<-arrivals_no_resource$activity_time
cat("\014") ## clear console
file.remove("envs.txt") ## remove output file if exists
rm(list=ls()) ## Reset Environment
cat("\014") ## clear console
file.remove("envs.txt") ## remove output file if exists
nbeds<-30 ## number of beds
myrep<-5 ## number of repetitions
period<-730 ## run for two years (365 * 2 = 730)
myIAT<-3.65 ## Inter Arrival Time (in Days) ## our time = 3.65 for 200 patients/730 day
NumGenPt<- 0 ## number of Patients to come at the exact time, default=0 (n-1)
install.packages("simmer")
install.packages("simmer")
library(simmer)
envs <- lapply(1:myrep, function(i) { #### lapply() to repeat myrep times
env <- simmer("DiseaseX-env")
############### START Implementation of Decision Tree ###################
## add a new patient trajectory
newpatient <- create_trajectory("DiseaseX_patient_path") %>%
## the use of function1() %>% function2() %>% function3()
## is the same as using function3(function2(function1()))
## if you need to set an attribute use set_attribute() function
set_attribute("health_attribute", function() rnorm(1,70,3))%>%
branch(function() sample(c(1,2),size=1,replace=T,prob=c(0.90,0.10)), continue=c(T, T),
### begin treatment Phase1
create_trajectory("Treatment_Phase1") %>%
seize("bed", amount = 1, priority = 1) %>%
## for counting purpose, use dummy resource like the following
seize("Treatment_Phase1_in", amount = 1, priority = 1) %>%
## use the proper distribution that match real distribution
timeout(function() rnorm(1, 31, 2)) %>%
release("bed", 1)%>%
set_attribute("health_attribute", function() rnorm(1,50,3))%>%
######### Discharge after Phase 1 #######
## again dummy resource for counting purpose
seize("gohome_after_Phase1", amount = 1, priority = 99) %>%
timeout(function() sample(c(4,5,6),1)) %>%
release("gohome_after_Phase1", 1)%>%
######### Discharge after Phase 1 ########
#================ begin phase 2 of treatment
branch(function() sample(c(1,2),size=1,replace=T,prob=c(0.964,0.036)), continue=c(T, T),
create_trajectory("Treatment_Phase2") %>%
seize("bed", amount = 1, priority = 9) %>%
seize("Treatment_Phase2_in", amount = 1, priority = 9) %>%
## 28 day
timeout(function() rnorm(1, 28, 2)) %>%
release("bed", 1)%>%
######### Discharge after Phase 2 ########
seize("gohome_after_Phase2", amount = 1, priority = 99) %>%
timeout(function() sample(c(4,5,6),1)) %>%
release("gohome_after_Phase2", 1)%>%
######### END Discharge after Phase 2 ########
#=============== begin phase 3 of treatment
branch(function() sample(c(1,2),size=1,replace=T,prob=c(0.752,0.248)), continue=c(T, T),
create_trajectory("Treatment_Phase3") %>%
seize("bed", amount = 1, priority = 8) %>%
seize("Treatment_Phase3_in", amount = 1, priority = 8) %>%
## 25 day
timeout(function() rnorm(1, 25, 2)) %>%
release("bed", 1) %>%
######### Discharge after Phase 3 ########
seize("gohome_after_phase3", amount = 1, priority = 99) %>%
timeout(function() sample(c(4,5,6),1)) %>%
release("gohome_after_phase3", 1)%>%
######### END Discharge after Phase 3 ########
#=============== begin phase 4 of treatment
branch(function() sample(c(1,2),size=1,replace=T,prob=c(0.99,0.01)), continue=c(T, T),
create_trajectory("Treatment_Phase4") %>%
seize("bed", amount = 1, priority = 8) %>%
seize("Treatment_Phase4_in", amount = 1, priority = 8) %>%
## 31.5 day
timeout(function() rnorm(1, 31.5, 2)) %>%
release("bed", 1) %>%
######### Discharge after Phase 4  ########
seize("gohome_after_phase4", amount = 1, priority = 99) %>%
timeout(function() sample(c(4,5,6),1)) %>%
release("gohome_after_phase4", 1)%>%
######### END Discharge after Phase 4 ########
#=====Relapse
branch(function() sample(c(1,2),size=1,replace=T,prob=c(0.2,0.8)), continue=c(T, T),
create_trajectory("relapse") %>%
seize("bed", amount = 1, priority = 8) %>%
seize("relapse", amount = 1, priority = 8) %>%
## 40 day
timeout(function() rnorm(1, 40, 2)) %>%
release("bed", 1)
,
create_trajectory("relapse_out") %>%
seize("relapse_out", amount = 1, priority = 1)
)
#=====END Relapse
,
create_trajectory("Phase4_out") %>%
seize("Phase4_out", amount = 1, priority = 1)
)
#=============End Phase 4
,
create_trajectory("Phase3_out") %>%
seize("Phase3_out", amount = 1, priority = 1)
)
#===============End phase 3
,
create_trajectory("Phase2_out") %>%
seize("Phase2_out", amount = 1, priority = 1)
)
#=================End phase 2
,
create_trajectory("Phase1_out") %>%
set_attribute("health_attribute", function() rnorm(1,90,3))%>%
seize("phase1_out", amount = 1, priority = 1)
)
############### END Implementation of Decision Tree ###################
env %>%
## add true resource
add_resource("bed", nbeds) %>%
### Note: only resources with defined capacity can be
### plotted in "Resource Utilization"
## add resources for counting purpose
add_resource("Treatment_Phase1_in", Inf) %>%
add_resource("Treatment_Phase2_in", Inf) %>%
add_resource("Treatment_Phase3_in", Inf) %>%
add_resource("Treatment_Phase4_in", Inf) %>%
add_resource("relapse", Inf) %>%
add_resource("gohome_after_Phase1", Inf) %>%
add_resource("gohome_after_Phase2", Inf) %>%
add_resource("gohome_after_phase3", Inf) %>%
add_resource("gohome_after_phase4", Inf) %>%
add_resource("Phase4_out", Inf) %>%
add_resource("Phase3_out", Inf) %>%
add_resource("Phase2_out", Inf) %>%
add_resource("phase1_out", Inf) %>%
add_resource("relapse_out", Inf) %>%
## Add "Disease-X patient" generator, we assumed exp distribution (from real data)
add_generator("test_patient", newpatient, function() c(rexp(1, 1/myIAT), rep(0, NumGenPt)), mon=2)
env %>% run(until=period) ## run the simulation until reach time specified
})
envs <- lapply(1:myrep, function(i) { #### lapply() to repeat myrep times
env <- simmer("DiseaseX-env")
############### START Implementation of Decision Tree ###################
## add a new patient trajectory
newpatient <- create_trajectory("DiseaseX_patient_path") %>%
## the use of function1() %>% function2() %>% function3()
## is the same as using function3(function2(function1()))
## if you need to set an attribute use set_attribute() function
set_attribute("health_attribute", function() rnorm(1,70,3))%>%
branch(function() sample(c(1,2),size=1,replace=T,prob=c(0.90,0.10)), continue=c(T, T),
### begin treatment Phase1
create_trajectory("Treatment_Phase1") %>%
seize("bed", amount = 1, priority = 1) %>%
## for counting purpose, use dummy resource like the following
seize("Treatment_Phase1_in", amount = 1, priority = 1) %>%
## use the proper distribution that match real distribution
timeout(function() rnorm(1, 31, 2)) %>%
release("bed", 1)%>%
set_attribute("health_attribute", function() rnorm(1,50,3))%>%
######### Discharge after Phase 1 #######
## again dummy resource for counting purpose
seize("gohome_after_Phase1", amount = 1, priority = 99) %>%
timeout(function() sample(c(4,5,6),1)) %>%
release("gohome_after_Phase1", 1)%>%
######### Discharge after Phase 1 ########
#================ begin phase 2 of treatment
branch(function() sample(c(1,2),size=1,replace=T,prob=c(0.964,0.036)), continue=c(T, T),
create_trajectory("Treatment_Phase2") %>%
seize("bed", amount = 1, priority = 9) %>%
seize("Treatment_Phase2_in", amount = 1, priority = 9) %>%
## 28 day
timeout(function() rnorm(1, 28, 2)) %>%
release("bed", 1)%>%
######### Discharge after Phase 2 ########
seize("gohome_after_Phase2", amount = 1, priority = 99) %>%
timeout(function() sample(c(4,5,6),1)) %>%
release("gohome_after_Phase2", 1)%>%
######### END Discharge after Phase 2 ########
#=============== begin phase 3 of treatment
branch(function() sample(c(1,2),size=1,replace=T,prob=c(0.752,0.248)), continue=c(T, T),
create_trajectory("Treatment_Phase3") %>%
seize("bed", amount = 1, priority = 8) %>%
seize("Treatment_Phase3_in", amount = 1, priority = 8) %>%
## 25 day
timeout(function() rnorm(1, 25, 2)) %>%
release("bed", 1) %>%
######### Discharge after Phase 3 ########
seize("gohome_after_phase3", amount = 1, priority = 99) %>%
timeout(function() sample(c(4,5,6),1)) %>%
release("gohome_after_phase3", 1)%>%
######### END Discharge after Phase 3 ########
#=============== begin phase 4 of treatment
branch(function() sample(c(1,2),size=1,replace=T,prob=c(0.99,0.01)), continue=c(T, T),
create_trajectory("Treatment_Phase4") %>%
seize("bed", amount = 1, priority = 8) %>%
seize("Treatment_Phase4_in", amount = 1, priority = 8) %>%
## 31.5 day
timeout(function() rnorm(1, 31.5, 2)) %>%
release("bed", 1) %>%
######### Discharge after Phase 4  ########
seize("gohome_after_phase4", amount = 1, priority = 99) %>%
timeout(function() sample(c(4,5,6),1)) %>%
release("gohome_after_phase4", 1)%>%
######### END Discharge after Phase 4 ########
#=====Relapse
branch(function() sample(c(1,2),size=1,replace=T,prob=c(0.2,0.8)), continue=c(T, T),
create_trajectory("relapse") %>%
seize("bed", amount = 1, priority = 8) %>%
seize("relapse", amount = 1, priority = 8) %>%
## 40 day
timeout(function() rnorm(1, 40, 2)) %>%
release("bed", 1)
,
create_trajectory("relapse_out") %>%
seize("relapse_out", amount = 1, priority = 1)
)
#=====END Relapse
,
create_trajectory("Phase4_out") %>%
seize("Phase4_out", amount = 1, priority = 1)
)
#=============End Phase 4
,
create_trajectory("Phase3_out") %>%
seize("Phase3_out", amount = 1, priority = 1)
)
#===============End phase 3
,
create_trajectory("Phase2_out") %>%
seize("Phase2_out", amount = 1, priority = 1)
)
#=================End phase 2
,
create_trajectory("Phase1_out") %>%
set_attribute("health_attribute", function() rnorm(1,90,3))%>%
seize("phase1_out", amount = 1, priority = 1)
)
############### END Implementation of Decision Tree ###################
env %>%
## add true resource
add_resource("bed", nbeds) %>%
### Note: only resources with defined capacity can be
### plotted in "Resource Utilization"
## add resources for counting purpose
add_resource("Treatment_Phase1_in", Inf) %>%
add_resource("Treatment_Phase2_in", Inf) %>%
add_resource("Treatment_Phase3_in", Inf) %>%
add_resource("Treatment_Phase4_in", Inf) %>%
add_resource("relapse", Inf) %>%
add_resource("gohome_after_Phase1", Inf) %>%
add_resource("gohome_after_Phase2", Inf) %>%
add_resource("gohome_after_phase3", Inf) %>%
add_resource("gohome_after_phase4", Inf) %>%
add_resource("Phase4_out", Inf) %>%
add_resource("Phase3_out", Inf) %>%
add_resource("Phase2_out", Inf) %>%
add_resource("phase1_out", Inf) %>%
add_resource("relapse_out", Inf) %>%
## Add "Disease-X patient" generator, we assumed exp distribution (from real data)
add_generator("test_patient", newpatient, function() c(rexp(1, 1/myIAT), rep(0, NumGenPt)), mon=2)
env %>% run(until=period) ## run the simulation until reach time specified
})
library(simmer)
nbeds<-30 ## number of beds
myrep<-5 ## number of repetitions
period<-730 ## run for two years (365 * 2 = 730)
myIAT<-3.65 ## Inter Arrival Time (in Days) ## our time = 3.65 for 200 patients/730 day
NumGenPt<- 0 ## number of Patients to come at the exact time, default=0 (n-1)
source("~/PHP-1560-Final/example.R", echo=TRUE)
install.packages("simmer")
source("~/PHP-1560-Final/example.R", echo=TRUE)
install.packages("simmer")
source("~/PHP-1560-Final/example.R", echo=TRUE)
source("~/PHP-1560-Final/example.R", echo=TRUE)
clear
```3
x<-3
3
shiny::runApp('php1560shiny')
source("~/PHP-1560-Final/project-v1/proj_simulation.R", echo=TRUE)
source("~/PHP-1560-Final/project-v1/proj_simulation.R", echo=TRUE)
source("~/PHP-1560-Final/project-v1/proj_simulation.R", echo=TRUE)
source("~/PHP-1560-Final/project-v1/proj_simulation.R", echo=TRUE)
source("~/PHP-1560-Final/project-v1/proj_simulation.R", echo=TRUE)
source("~/PHP-1560-Final/project-v1/proj_simulation.R", echo=TRUE)
source("~/PHP-1560-Final/project-v1/proj_simulation.R", echo=TRUE)
source("~/PHP-1560-Final/project-v1/proj_simulation.R", echo=TRUE)
source("~/PHP-1560-Final/project-v1/proj_simulation.R", echo=TRUE)
source("~/PHP-1560-Final/project-v1/proj_simulation.R", echo=TRUE)
source("~/PHP-1560-Final/project-v1/proj_simulation.R", echo=TRUE)
source("~/PHP-1560-Final/project-v1/proj_simulation.R", echo=TRUE)
source("~/PHP-1560-Final/project-v1/proj_simulation.R", echo=TRUE)
source("~/PHP-1560-Final/project-v1/proj_simulation.R", echo=TRUE)
source("~/PHP-1560-Final/project-v1/proj_simulation.R", echo=TRUE)
source("~/PHP-1560-Final/project-v1/proj_simulation.R", echo=TRUE)
source("~/PHP-1560-Final/project-v1/proj_simulation.R", echo=TRUE)
source("~/PHP-1560-Final/project-v1/proj_simulation.R", echo=TRUE)
source("~/PHP-1560-Final/project-v1/proj_simulation.R", echo=TRUE)
source("~/PHP-1560-Final/project-v1/proj_simulation.R", echo=TRUE)
source("~/PHP-1560-Final/project-v1/proj_simulation.R", echo=TRUE)
source("~/PHP-1560-Final/project-v1/proj_simulation.R", echo=TRUE)
source("~/PHP-1560-Final/project-v1/proj_simulation.R", echo=TRUE)
source("~/PHP-1560-Final/project-v1/proj_simulation.R", echo=TRUE)
source("~/PHP-1560-Final/project-v1/proj_simulation.R", echo=TRUE)
source("~/PHP-1560-Final/project-v1/proj_simulation.R", echo=TRUE)
source("~/PHP-1560-Final/project-v1/proj_simulation.R", echo=TRUE)
source("~/PHP-1560-Final/project-v1/proj_simulation.R", echo=TRUE)
source("~/PHP-1560-Final/project-v1/proj_simulation.R", echo=TRUE)
source("~/PHP-1560-Final/project-v1/proj_simulation.R", echo=TRUE)
library(shiny); runApp('project-v1/Test_app.R')
# Average Number of New Female Admits is .024% of the Female Population
f_adm_rate <- fem_pop*.00032
runApp('project-v1/Test_app.R')
