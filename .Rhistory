shiny::runApp('project-v1')
runApp('project-v1')
runApp('project-v1')
runApp('project-v1')
git push
ui <- fluidPage(theme = "theme.css",
titlePanel("Button Styler"),
sidebarLayout(
sidebarPanel(
helpText("Style your buttons!"),
# Label
textInput("label", "Select text form button", "Label"),
# Text color
# colourInput("color", "Select text colour", "black"),
# Text size
numericInput("font_size", "Select text size", 18, min = 1, max = 50),
# Background color
# colourInput("background", "Select background colour", "white"),
# Border color
# colourInput("border_color", "Select border color", "gray"),
# Border style
selectInput("border_style", "Select border style", style_choices, "solid"),
# Border size
numericInput("border_width", "Select border width", 1, min = 1, max = 10),
# Border radius
sliderInput("border_radius", "Select border radius", 5, min = 0, max = 100)
),
mainPanel(
h2("Styled Button"),
htmlOutput("button", align = "center"),
h2("Code"),
verbatimTextOutput("text")
)
)
)
git push
runApp('project-v1')
runApp('project-v1')
runApp('project-v1')
runApp('project-v1')
runApp('project-v1')
runApp('project-v1')
library(shiny); runApp('project-v1/Test_app.R')
runApp('project-v1')
runApp('project-v1/Test_app.R')
hist(dpois(100, lambda = 4.6))
runApp('project-v1/Test_app.R')
runApp('~/Desktop/shiny-app-demos/demo_appv2.R')
runApp('~/Desktop/shiny-app-demos/demo_appv2.R')
runApp('~/Desktop/shiny-app-demos/demo_appv2.R')
output$treatmentTable <- reactive({
# Creates a table with variable distributions by study
# Only show a table if more than one study is selected
req(length(input$selected_studies) > 1)
# Summarize by study
df_f <- df_filtered()
# Create a table stratified by studies
if (length(unique(df_f$study)) > 1){
tab <- CreateTableOne(vars = c("treat", "age", "measure"),
strata = c("study"), data = df_f,
factorVars = c("treat"), addOverall = TRUE)
} else{
tab <- CreateTableOne(vars = c("treat", "age", "measure"),
data = df_f, factorVars = c("treat"))
}
tab <- kableone(tab, format = "html") %>%
kable_styling(
font_size = 15,
bootstrap_options = c("striped", "hover", "condensed")
)
return(tab)
})
runApp('~/Desktop/shiny-app-demos/demo_appv2.R')
runApp('project-v1/Test_app.R')
for(i in 1:100){
# Generates random number of new admits (n) given an adm_rate for M/F
m_new_admits <- rpois(1, m_adm_rate)
f_new_admits <- rpois(1, f_adm_rate)
# Generates n number of new M/F admits with given LoS Averages
m_los <- rpois(m_new_admits, 5)
f_los <-  rpois(f_new_admits, 4.3)
new_adm <- c(m_los, f_los)
# Tracks Number of New Daily Admits
new_daily_adm <- append(new_daily_adm, length(new_adm))
# Tracks and Updates all Patients Data
all_admits <- append(all_admits, new_adm)
# Tracks all patient's LoS
LoS <- append(LoS, new_adm)
# Checks how many people in hospital with days remaining
daily_total <- append(daily_total, sum(all_admits > 0))
# Simulates Next Day
all_admits <- all_admits - 1
}
shiny::runApp('project-v1')
runApp('project-v1/Test_app.R')
library(shiny); runApp('project-v1/Test-app2.R')
runApp('project-v1/Test-app2.R')
runApp('project-v1/Test-app2.R')
runApp('project-v1/Test-app2.R')
runApp('project-v1/Test-app2.R')
runApp('project-v1/Test-app2.R')
runApp('project-v1/Test-app2.R')
runApp('project-v1/Test-app2.R')
runApp('Test-app2.R')
runApp('Test-app2.R')
runApp('Test-app2.R')
runApp('Test-app2.R')
runApp('Test-app2.R')
runApp('Test-app2.R')
runApp('Test-app2.R')
runApp('Test-app2.R')
runApp('Test-app2.R')
runApp('Test-app2.R')
runApp('Test-app2.R')
runApp('project-v1/Test-app2.R')
runApp('Test-app2.R')
runApp('Test-app2.R')
runApp('project-v1/Test-app2.R')
